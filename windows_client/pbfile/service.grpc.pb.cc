// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* ProjectService_method_names[] = {
  "/ProjectService/UserLogin",
  "/ProjectService/UserRegistration",
  "/ProjectService/CarOperation",
  "/ProjectService/GetUserData",
  "/ProjectService/AdminLogin",
};

std::unique_ptr< ProjectService::Stub> ProjectService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProjectService::Stub> stub(new ProjectService::Stub(channel, options));
  return stub;
}

ProjectService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UserLogin_(ProjectService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserRegistration_(ProjectService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CarOperation_(ProjectService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUserData_(ProjectService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AdminLogin_(ProjectService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProjectService::Stub::UserLogin(::grpc::ClientContext* context, const ::UserLoginRequest& request, ::UserLoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UserLoginRequest, ::UserLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserLogin_, context, request, response);
}

void ProjectService::Stub::async::UserLogin(::grpc::ClientContext* context, const ::UserLoginRequest* request, ::UserLoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UserLoginRequest, ::UserLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLogin_, context, request, response, std::move(f));
}

void ProjectService::Stub::async::UserLogin(::grpc::ClientContext* context, const ::UserLoginRequest* request, ::UserLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UserLoginResponse>* ProjectService::Stub::PrepareAsyncUserLoginRaw(::grpc::ClientContext* context, const ::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UserLoginResponse, ::UserLoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserLogin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UserLoginResponse>* ProjectService::Stub::AsyncUserLoginRaw(::grpc::ClientContext* context, const ::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectService::Stub::UserRegistration(::grpc::ClientContext* context, const ::UserRegistrationRequest& request, ::UserRegistrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UserRegistrationRequest, ::UserRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserRegistration_, context, request, response);
}

void ProjectService::Stub::async::UserRegistration(::grpc::ClientContext* context, const ::UserRegistrationRequest* request, ::UserRegistrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UserRegistrationRequest, ::UserRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserRegistration_, context, request, response, std::move(f));
}

void ProjectService::Stub::async::UserRegistration(::grpc::ClientContext* context, const ::UserRegistrationRequest* request, ::UserRegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserRegistration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UserRegistrationResponse>* ProjectService::Stub::PrepareAsyncUserRegistrationRaw(::grpc::ClientContext* context, const ::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UserRegistrationResponse, ::UserRegistrationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserRegistration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UserRegistrationResponse>* ProjectService::Stub::AsyncUserRegistrationRaw(::grpc::ClientContext* context, const ::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserRegistrationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectService::Stub::CarOperation(::grpc::ClientContext* context, const ::CarOperationRequest& request, ::CarOperationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CarOperationRequest, ::CarOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CarOperation_, context, request, response);
}

void ProjectService::Stub::async::CarOperation(::grpc::ClientContext* context, const ::CarOperationRequest* request, ::CarOperationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CarOperationRequest, ::CarOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CarOperation_, context, request, response, std::move(f));
}

void ProjectService::Stub::async::CarOperation(::grpc::ClientContext* context, const ::CarOperationRequest* request, ::CarOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CarOperation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CarOperationResponse>* ProjectService::Stub::PrepareAsyncCarOperationRaw(::grpc::ClientContext* context, const ::CarOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CarOperationResponse, ::CarOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CarOperation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CarOperationResponse>* ProjectService::Stub::AsyncCarOperationRaw(::grpc::ClientContext* context, const ::CarOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCarOperationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectService::Stub::GetUserData(::grpc::ClientContext* context, const ::GetUserDataRequest& request, ::GetUserDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetUserDataRequest, ::GetUserDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUserData_, context, request, response);
}

void ProjectService::Stub::async::GetUserData(::grpc::ClientContext* context, const ::GetUserDataRequest* request, ::GetUserDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetUserDataRequest, ::GetUserDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserData_, context, request, response, std::move(f));
}

void ProjectService::Stub::async::GetUserData(::grpc::ClientContext* context, const ::GetUserDataRequest* request, ::GetUserDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetUserDataResponse>* ProjectService::Stub::PrepareAsyncGetUserDataRaw(::grpc::ClientContext* context, const ::GetUserDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetUserDataResponse, ::GetUserDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUserData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetUserDataResponse>* ProjectService::Stub::AsyncGetUserDataRaw(::grpc::ClientContext* context, const ::GetUserDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectService::Stub::AdminLogin(::grpc::ClientContext* context, const ::AdminLoginRequest& request, ::AdminLoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::AdminLoginRequest, ::AdminLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AdminLogin_, context, request, response);
}

void ProjectService::Stub::async::AdminLogin(::grpc::ClientContext* context, const ::AdminLoginRequest* request, ::AdminLoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::AdminLoginRequest, ::AdminLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AdminLogin_, context, request, response, std::move(f));
}

void ProjectService::Stub::async::AdminLogin(::grpc::ClientContext* context, const ::AdminLoginRequest* request, ::AdminLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AdminLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AdminLoginResponse>* ProjectService::Stub::PrepareAsyncAdminLoginRaw(::grpc::ClientContext* context, const ::AdminLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::AdminLoginResponse, ::AdminLoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AdminLogin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::AdminLoginResponse>* ProjectService::Stub::AsyncAdminLoginRaw(::grpc::ClientContext* context, const ::AdminLoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAdminLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProjectService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::UserLoginRequest, ::UserLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UserLoginRequest* req,
             ::UserLoginResponse* resp) {
               return service->UserLogin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::UserRegistrationRequest, ::UserRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UserRegistrationRequest* req,
             ::UserRegistrationResponse* resp) {
               return service->UserRegistration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::CarOperationRequest, ::CarOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CarOperationRequest* req,
             ::CarOperationResponse* resp) {
               return service->CarOperation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::GetUserDataRequest, ::GetUserDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetUserDataRequest* req,
             ::GetUserDataResponse* resp) {
               return service->GetUserData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::AdminLoginRequest, ::AdminLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AdminLoginRequest* req,
             ::AdminLoginResponse* resp) {
               return service->AdminLogin(ctx, req, resp);
             }, this)));
}

ProjectService::Service::~Service() {
}

::grpc::Status ProjectService::Service::UserLogin(::grpc::ServerContext* context, const ::UserLoginRequest* request, ::UserLoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::UserRegistration(::grpc::ServerContext* context, const ::UserRegistrationRequest* request, ::UserRegistrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::CarOperation(::grpc::ServerContext* context, const ::CarOperationRequest* request, ::CarOperationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::GetUserData(::grpc::ServerContext* context, const ::GetUserDataRequest* request, ::GetUserDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::AdminLogin(::grpc::ServerContext* context, const ::AdminLoginRequest* request, ::AdminLoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


