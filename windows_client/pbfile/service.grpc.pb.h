// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto
#ifndef GRPC_service_2eproto__INCLUDED
#define GRPC_service_2eproto__INCLUDED

#include "service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class ProjectService final {
 public:
  static constexpr char const* service_full_name() {
    return "ProjectService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status UserLogin(::grpc::ClientContext* context, const ::UserLoginRequest& request, ::UserLoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserLoginResponse>> AsyncUserLogin(::grpc::ClientContext* context, const ::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserLoginResponse>>(AsyncUserLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserLoginResponse>> PrepareAsyncUserLogin(::grpc::ClientContext* context, const ::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserLoginResponse>>(PrepareAsyncUserLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status UserRegistration(::grpc::ClientContext* context, const ::UserRegistrationRequest& request, ::UserRegistrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserRegistrationResponse>> AsyncUserRegistration(::grpc::ClientContext* context, const ::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserRegistrationResponse>>(AsyncUserRegistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserRegistrationResponse>> PrepareAsyncUserRegistration(::grpc::ClientContext* context, const ::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserRegistrationResponse>>(PrepareAsyncUserRegistrationRaw(context, request, cq));
    }
    virtual ::grpc::Status CarOperation(::grpc::ClientContext* context, const ::CarOperationRequest& request, ::CarOperationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CarOperationResponse>> AsyncCarOperation(::grpc::ClientContext* context, const ::CarOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CarOperationResponse>>(AsyncCarOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CarOperationResponse>> PrepareAsyncCarOperation(::grpc::ClientContext* context, const ::CarOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CarOperationResponse>>(PrepareAsyncCarOperationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetUserData(::grpc::ClientContext* context, const ::GetUserDataRequest& request, ::GetUserDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetUserDataResponse>> AsyncGetUserData(::grpc::ClientContext* context, const ::GetUserDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetUserDataResponse>>(AsyncGetUserDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetUserDataResponse>> PrepareAsyncGetUserData(::grpc::ClientContext* context, const ::GetUserDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetUserDataResponse>>(PrepareAsyncGetUserDataRaw(context, request, cq));
    }
    virtual ::grpc::Status AdminLogin(::grpc::ClientContext* context, const ::AdminLoginRequest& request, ::AdminLoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AdminLoginResponse>> AsyncAdminLogin(::grpc::ClientContext* context, const ::AdminLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AdminLoginResponse>>(AsyncAdminLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AdminLoginResponse>> PrepareAsyncAdminLogin(::grpc::ClientContext* context, const ::AdminLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AdminLoginResponse>>(PrepareAsyncAdminLoginRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void UserLogin(::grpc::ClientContext* context, const ::UserLoginRequest* request, ::UserLoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UserLogin(::grpc::ClientContext* context, const ::UserLoginRequest* request, ::UserLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UserRegistration(::grpc::ClientContext* context, const ::UserRegistrationRequest* request, ::UserRegistrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UserRegistration(::grpc::ClientContext* context, const ::UserRegistrationRequest* request, ::UserRegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CarOperation(::grpc::ClientContext* context, const ::CarOperationRequest* request, ::CarOperationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CarOperation(::grpc::ClientContext* context, const ::CarOperationRequest* request, ::CarOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetUserData(::grpc::ClientContext* context, const ::GetUserDataRequest* request, ::GetUserDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUserData(::grpc::ClientContext* context, const ::GetUserDataRequest* request, ::GetUserDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AdminLogin(::grpc::ClientContext* context, const ::AdminLoginRequest* request, ::AdminLoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AdminLogin(::grpc::ClientContext* context, const ::AdminLoginRequest* request, ::AdminLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UserLoginResponse>* AsyncUserLoginRaw(::grpc::ClientContext* context, const ::UserLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UserLoginResponse>* PrepareAsyncUserLoginRaw(::grpc::ClientContext* context, const ::UserLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UserRegistrationResponse>* AsyncUserRegistrationRaw(::grpc::ClientContext* context, const ::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UserRegistrationResponse>* PrepareAsyncUserRegistrationRaw(::grpc::ClientContext* context, const ::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CarOperationResponse>* AsyncCarOperationRaw(::grpc::ClientContext* context, const ::CarOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CarOperationResponse>* PrepareAsyncCarOperationRaw(::grpc::ClientContext* context, const ::CarOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetUserDataResponse>* AsyncGetUserDataRaw(::grpc::ClientContext* context, const ::GetUserDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetUserDataResponse>* PrepareAsyncGetUserDataRaw(::grpc::ClientContext* context, const ::GetUserDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AdminLoginResponse>* AsyncAdminLoginRaw(::grpc::ClientContext* context, const ::AdminLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AdminLoginResponse>* PrepareAsyncAdminLoginRaw(::grpc::ClientContext* context, const ::AdminLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UserLogin(::grpc::ClientContext* context, const ::UserLoginRequest& request, ::UserLoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserLoginResponse>> AsyncUserLogin(::grpc::ClientContext* context, const ::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserLoginResponse>>(AsyncUserLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserLoginResponse>> PrepareAsyncUserLogin(::grpc::ClientContext* context, const ::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserLoginResponse>>(PrepareAsyncUserLoginRaw(context, request, cq));
    }
    ::grpc::Status UserRegistration(::grpc::ClientContext* context, const ::UserRegistrationRequest& request, ::UserRegistrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserRegistrationResponse>> AsyncUserRegistration(::grpc::ClientContext* context, const ::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserRegistrationResponse>>(AsyncUserRegistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserRegistrationResponse>> PrepareAsyncUserRegistration(::grpc::ClientContext* context, const ::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserRegistrationResponse>>(PrepareAsyncUserRegistrationRaw(context, request, cq));
    }
    ::grpc::Status CarOperation(::grpc::ClientContext* context, const ::CarOperationRequest& request, ::CarOperationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CarOperationResponse>> AsyncCarOperation(::grpc::ClientContext* context, const ::CarOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CarOperationResponse>>(AsyncCarOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CarOperationResponse>> PrepareAsyncCarOperation(::grpc::ClientContext* context, const ::CarOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CarOperationResponse>>(PrepareAsyncCarOperationRaw(context, request, cq));
    }
    ::grpc::Status GetUserData(::grpc::ClientContext* context, const ::GetUserDataRequest& request, ::GetUserDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetUserDataResponse>> AsyncGetUserData(::grpc::ClientContext* context, const ::GetUserDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetUserDataResponse>>(AsyncGetUserDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetUserDataResponse>> PrepareAsyncGetUserData(::grpc::ClientContext* context, const ::GetUserDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetUserDataResponse>>(PrepareAsyncGetUserDataRaw(context, request, cq));
    }
    ::grpc::Status AdminLogin(::grpc::ClientContext* context, const ::AdminLoginRequest& request, ::AdminLoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AdminLoginResponse>> AsyncAdminLogin(::grpc::ClientContext* context, const ::AdminLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AdminLoginResponse>>(AsyncAdminLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AdminLoginResponse>> PrepareAsyncAdminLogin(::grpc::ClientContext* context, const ::AdminLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AdminLoginResponse>>(PrepareAsyncAdminLoginRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UserLogin(::grpc::ClientContext* context, const ::UserLoginRequest* request, ::UserLoginResponse* response, std::function<void(::grpc::Status)>) override;
      void UserLogin(::grpc::ClientContext* context, const ::UserLoginRequest* request, ::UserLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UserRegistration(::grpc::ClientContext* context, const ::UserRegistrationRequest* request, ::UserRegistrationResponse* response, std::function<void(::grpc::Status)>) override;
      void UserRegistration(::grpc::ClientContext* context, const ::UserRegistrationRequest* request, ::UserRegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CarOperation(::grpc::ClientContext* context, const ::CarOperationRequest* request, ::CarOperationResponse* response, std::function<void(::grpc::Status)>) override;
      void CarOperation(::grpc::ClientContext* context, const ::CarOperationRequest* request, ::CarOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUserData(::grpc::ClientContext* context, const ::GetUserDataRequest* request, ::GetUserDataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUserData(::grpc::ClientContext* context, const ::GetUserDataRequest* request, ::GetUserDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AdminLogin(::grpc::ClientContext* context, const ::AdminLoginRequest* request, ::AdminLoginResponse* response, std::function<void(::grpc::Status)>) override;
      void AdminLogin(::grpc::ClientContext* context, const ::AdminLoginRequest* request, ::AdminLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::UserLoginResponse>* AsyncUserLoginRaw(::grpc::ClientContext* context, const ::UserLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UserLoginResponse>* PrepareAsyncUserLoginRaw(::grpc::ClientContext* context, const ::UserLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UserRegistrationResponse>* AsyncUserRegistrationRaw(::grpc::ClientContext* context, const ::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UserRegistrationResponse>* PrepareAsyncUserRegistrationRaw(::grpc::ClientContext* context, const ::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CarOperationResponse>* AsyncCarOperationRaw(::grpc::ClientContext* context, const ::CarOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CarOperationResponse>* PrepareAsyncCarOperationRaw(::grpc::ClientContext* context, const ::CarOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetUserDataResponse>* AsyncGetUserDataRaw(::grpc::ClientContext* context, const ::GetUserDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetUserDataResponse>* PrepareAsyncGetUserDataRaw(::grpc::ClientContext* context, const ::GetUserDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AdminLoginResponse>* AsyncAdminLoginRaw(::grpc::ClientContext* context, const ::AdminLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AdminLoginResponse>* PrepareAsyncAdminLoginRaw(::grpc::ClientContext* context, const ::AdminLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UserLogin_;
    const ::grpc::internal::RpcMethod rpcmethod_UserRegistration_;
    const ::grpc::internal::RpcMethod rpcmethod_CarOperation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUserData_;
    const ::grpc::internal::RpcMethod rpcmethod_AdminLogin_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UserLogin(::grpc::ServerContext* context, const ::UserLoginRequest* request, ::UserLoginResponse* response);
    virtual ::grpc::Status UserRegistration(::grpc::ServerContext* context, const ::UserRegistrationRequest* request, ::UserRegistrationResponse* response);
    virtual ::grpc::Status CarOperation(::grpc::ServerContext* context, const ::CarOperationRequest* request, ::CarOperationResponse* response);
    virtual ::grpc::Status GetUserData(::grpc::ServerContext* context, const ::GetUserDataRequest* request, ::GetUserDataResponse* response);
    virtual ::grpc::Status AdminLogin(::grpc::ServerContext* context, const ::AdminLoginRequest* request, ::AdminLoginResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UserLogin() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::UserLoginRequest* /*request*/, ::UserLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserLogin(::grpc::ServerContext* context, ::UserLoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::UserLoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UserRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UserRegistration() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UserRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserRegistration(::grpc::ServerContext* /*context*/, const ::UserRegistrationRequest* /*request*/, ::UserRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserRegistration(::grpc::ServerContext* context, ::UserRegistrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::UserRegistrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CarOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CarOperation() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CarOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CarOperation(::grpc::ServerContext* /*context*/, const ::CarOperationRequest* /*request*/, ::CarOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCarOperation(::grpc::ServerContext* context, ::CarOperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::CarOperationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUserData() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetUserData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserData(::grpc::ServerContext* /*context*/, const ::GetUserDataRequest* /*request*/, ::GetUserDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserData(::grpc::ServerContext* context, ::GetUserDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetUserDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AdminLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AdminLogin() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AdminLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AdminLogin(::grpc::ServerContext* /*context*/, const ::AdminLoginRequest* /*request*/, ::AdminLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdminLogin(::grpc::ServerContext* context, ::AdminLoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::AdminLoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UserLogin<WithAsyncMethod_UserRegistration<WithAsyncMethod_CarOperation<WithAsyncMethod_GetUserData<WithAsyncMethod_AdminLogin<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UserLogin() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::UserLoginRequest, ::UserLoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::UserLoginRequest* request, ::UserLoginResponse* response) { return this->UserLogin(context, request, response); }));}
    void SetMessageAllocatorFor_UserLogin(
        ::grpc::MessageAllocator< ::UserLoginRequest, ::UserLoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::UserLoginRequest, ::UserLoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::UserLoginRequest* /*request*/, ::UserLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UserLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::UserLoginRequest* /*request*/, ::UserLoginResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UserRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UserRegistration() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::UserRegistrationRequest, ::UserRegistrationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::UserRegistrationRequest* request, ::UserRegistrationResponse* response) { return this->UserRegistration(context, request, response); }));}
    void SetMessageAllocatorFor_UserRegistration(
        ::grpc::MessageAllocator< ::UserRegistrationRequest, ::UserRegistrationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::UserRegistrationRequest, ::UserRegistrationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UserRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserRegistration(::grpc::ServerContext* /*context*/, const ::UserRegistrationRequest* /*request*/, ::UserRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UserRegistration(
      ::grpc::CallbackServerContext* /*context*/, const ::UserRegistrationRequest* /*request*/, ::UserRegistrationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CarOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CarOperation() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::CarOperationRequest, ::CarOperationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CarOperationRequest* request, ::CarOperationResponse* response) { return this->CarOperation(context, request, response); }));}
    void SetMessageAllocatorFor_CarOperation(
        ::grpc::MessageAllocator< ::CarOperationRequest, ::CarOperationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CarOperationRequest, ::CarOperationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CarOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CarOperation(::grpc::ServerContext* /*context*/, const ::CarOperationRequest* /*request*/, ::CarOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CarOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::CarOperationRequest* /*request*/, ::CarOperationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUserData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUserData() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::GetUserDataRequest, ::GetUserDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetUserDataRequest* request, ::GetUserDataResponse* response) { return this->GetUserData(context, request, response); }));}
    void SetMessageAllocatorFor_GetUserData(
        ::grpc::MessageAllocator< ::GetUserDataRequest, ::GetUserDataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetUserDataRequest, ::GetUserDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUserData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserData(::grpc::ServerContext* /*context*/, const ::GetUserDataRequest* /*request*/, ::GetUserDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserData(
      ::grpc::CallbackServerContext* /*context*/, const ::GetUserDataRequest* /*request*/, ::GetUserDataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AdminLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AdminLogin() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::AdminLoginRequest, ::AdminLoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::AdminLoginRequest* request, ::AdminLoginResponse* response) { return this->AdminLogin(context, request, response); }));}
    void SetMessageAllocatorFor_AdminLogin(
        ::grpc::MessageAllocator< ::AdminLoginRequest, ::AdminLoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::AdminLoginRequest, ::AdminLoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AdminLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AdminLogin(::grpc::ServerContext* /*context*/, const ::AdminLoginRequest* /*request*/, ::AdminLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AdminLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::AdminLoginRequest* /*request*/, ::AdminLoginResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_UserLogin<WithCallbackMethod_UserRegistration<WithCallbackMethod_CarOperation<WithCallbackMethod_GetUserData<WithCallbackMethod_AdminLogin<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UserLogin() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::UserLoginRequest* /*request*/, ::UserLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UserRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UserRegistration() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UserRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserRegistration(::grpc::ServerContext* /*context*/, const ::UserRegistrationRequest* /*request*/, ::UserRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CarOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CarOperation() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CarOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CarOperation(::grpc::ServerContext* /*context*/, const ::CarOperationRequest* /*request*/, ::CarOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUserData() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetUserData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserData(::grpc::ServerContext* /*context*/, const ::GetUserDataRequest* /*request*/, ::GetUserDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AdminLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AdminLogin() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AdminLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AdminLogin(::grpc::ServerContext* /*context*/, const ::AdminLoginRequest* /*request*/, ::AdminLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UserLogin() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::UserLoginRequest* /*request*/, ::UserLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UserRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UserRegistration() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UserRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserRegistration(::grpc::ServerContext* /*context*/, const ::UserRegistrationRequest* /*request*/, ::UserRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserRegistration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CarOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CarOperation() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CarOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CarOperation(::grpc::ServerContext* /*context*/, const ::CarOperationRequest* /*request*/, ::CarOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCarOperation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUserData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUserData() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetUserData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserData(::grpc::ServerContext* /*context*/, const ::GetUserDataRequest* /*request*/, ::GetUserDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AdminLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AdminLogin() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AdminLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AdminLogin(::grpc::ServerContext* /*context*/, const ::AdminLoginRequest* /*request*/, ::AdminLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdminLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UserLogin() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UserLogin(context, request, response); }));
    }
    ~WithRawCallbackMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::UserLoginRequest* /*request*/, ::UserLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UserLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UserRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UserRegistration() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UserRegistration(context, request, response); }));
    }
    ~WithRawCallbackMethod_UserRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserRegistration(::grpc::ServerContext* /*context*/, const ::UserRegistrationRequest* /*request*/, ::UserRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UserRegistration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CarOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CarOperation() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CarOperation(context, request, response); }));
    }
    ~WithRawCallbackMethod_CarOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CarOperation(::grpc::ServerContext* /*context*/, const ::CarOperationRequest* /*request*/, ::CarOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CarOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUserData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUserData() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUserData(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUserData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserData(::grpc::ServerContext* /*context*/, const ::GetUserDataRequest* /*request*/, ::GetUserDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AdminLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AdminLogin() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AdminLogin(context, request, response); }));
    }
    ~WithRawCallbackMethod_AdminLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AdminLogin(::grpc::ServerContext* /*context*/, const ::AdminLoginRequest* /*request*/, ::AdminLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AdminLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UserLogin() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::UserLoginRequest, ::UserLoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::UserLoginRequest, ::UserLoginResponse>* streamer) {
                       return this->StreamedUserLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::UserLoginRequest* /*request*/, ::UserLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUserLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::UserLoginRequest,::UserLoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UserRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UserRegistration() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::UserRegistrationRequest, ::UserRegistrationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::UserRegistrationRequest, ::UserRegistrationResponse>* streamer) {
                       return this->StreamedUserRegistration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UserRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UserRegistration(::grpc::ServerContext* /*context*/, const ::UserRegistrationRequest* /*request*/, ::UserRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUserRegistration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::UserRegistrationRequest,::UserRegistrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CarOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CarOperation() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CarOperationRequest, ::CarOperationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CarOperationRequest, ::CarOperationResponse>* streamer) {
                       return this->StreamedCarOperation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CarOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CarOperation(::grpc::ServerContext* /*context*/, const ::CarOperationRequest* /*request*/, ::CarOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCarOperation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CarOperationRequest,::CarOperationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUserData() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetUserDataRequest, ::GetUserDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetUserDataRequest, ::GetUserDataResponse>* streamer) {
                       return this->StreamedGetUserData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUserData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserData(::grpc::ServerContext* /*context*/, const ::GetUserDataRequest* /*request*/, ::GetUserDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetUserDataRequest,::GetUserDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AdminLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AdminLogin() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::AdminLoginRequest, ::AdminLoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::AdminLoginRequest, ::AdminLoginResponse>* streamer) {
                       return this->StreamedAdminLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AdminLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AdminLogin(::grpc::ServerContext* /*context*/, const ::AdminLoginRequest* /*request*/, ::AdminLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAdminLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AdminLoginRequest,::AdminLoginResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UserLogin<WithStreamedUnaryMethod_UserRegistration<WithStreamedUnaryMethod_CarOperation<WithStreamedUnaryMethod_GetUserData<WithStreamedUnaryMethod_AdminLogin<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UserLogin<WithStreamedUnaryMethod_UserRegistration<WithStreamedUnaryMethod_CarOperation<WithStreamedUnaryMethod_GetUserData<WithStreamedUnaryMethod_AdminLogin<Service > > > > > StreamedService;
};


#endif  // GRPC_service_2eproto__INCLUDED
