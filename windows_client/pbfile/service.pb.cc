// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#include "service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ParkingInfo::ParkingInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.p_id_)*/0
  , /*decltype(_impl_.temperature_)*/0
  , /*decltype(_impl_.humidity_)*/0
  , /*decltype(_impl_.weather_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParkingInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParkingInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParkingInfoDefaultTypeInternal() {}
  union {
    ParkingInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParkingInfoDefaultTypeInternal _ParkingInfo_default_instance_;
PROTOBUF_CONSTEXPR ParkingSpaceInfo::ParkingSpaceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.s_id_)*/0
  , /*decltype(_impl_.temperature_)*/0
  , /*decltype(_impl_.humidity_)*/0
  , /*decltype(_impl_.alarm_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParkingSpaceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParkingSpaceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParkingSpaceInfoDefaultTypeInternal() {}
  union {
    ParkingSpaceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParkingSpaceInfoDefaultTypeInternal _ParkingSpaceInfo_default_instance_;
PROTOBUF_CONSTEXPR CarInfo::CarInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.p_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.p_temperature_)*/0
  , /*decltype(_impl_.p_humidity_)*/0
  , /*decltype(_impl_.p_weather_)*/0
  , /*decltype(_impl_.s_id_)*/0
  , /*decltype(_impl_.s_temperature_)*/0
  , /*decltype(_impl_.s_humidity_)*/0
  , /*decltype(_impl_.s_alarm_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CarInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarInfoDefaultTypeInternal() {}
  union {
    CarInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarInfoDefaultTypeInternal _CarInfo_default_instance_;
PROTOBUF_CONSTEXPR LPCheckRequest::LPCheckRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.license_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_)*/0
  , /*decltype(_impl_.parking_id_)*/0
  , /*decltype(_impl_.parking_space_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LPCheckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LPCheckRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LPCheckRequestDefaultTypeInternal() {}
  union {
    LPCheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LPCheckRequestDefaultTypeInternal _LPCheckRequest_default_instance_;
PROTOBUF_CONSTEXPR LPCheckResponse::LPCheckResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_.balance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LPCheckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LPCheckResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LPCheckResponseDefaultTypeInternal() {}
  union {
    LPCheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LPCheckResponseDefaultTypeInternal _LPCheckResponse_default_instance_;
PROTOBUF_CONSTEXPR UploadInfoRequest::UploadInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.s_info_arr_)*/{}
  , /*decltype(_impl_.p_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadInfoRequestDefaultTypeInternal() {}
  union {
    UploadInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadInfoRequestDefaultTypeInternal _UploadInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR UploadInfoResponse::UploadInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadInfoResponseDefaultTypeInternal() {}
  union {
    UploadInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadInfoResponseDefaultTypeInternal _UploadInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR UserLoginRequest::UserLoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserLoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLoginRequestDefaultTypeInternal() {}
  union {
    UserLoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLoginRequestDefaultTypeInternal _UserLoginRequest_default_instance_;
PROTOBUF_CONSTEXPR UserLoginResponse::UserLoginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.u_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserLoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLoginResponseDefaultTypeInternal() {}
  union {
    UserLoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLoginResponseDefaultTypeInternal _UserLoginResponse_default_instance_;
PROTOBUF_CONSTEXPR UserRegistrationRequest::UserRegistrationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserRegistrationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserRegistrationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserRegistrationRequestDefaultTypeInternal() {}
  union {
    UserRegistrationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserRegistrationRequestDefaultTypeInternal _UserRegistrationRequest_default_instance_;
PROTOBUF_CONSTEXPR UserRegistrationResponse::UserRegistrationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserRegistrationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserRegistrationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserRegistrationResponseDefaultTypeInternal() {}
  union {
    UserRegistrationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserRegistrationResponseDefaultTypeInternal _UserRegistrationResponse_default_instance_;
PROTOBUF_CONSTEXPR CarOperationRequest::CarOperationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.license_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_license_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operation_)*/0
  , /*decltype(_impl_.u_id_)*/0} {}
struct CarOperationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarOperationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarOperationRequestDefaultTypeInternal() {}
  union {
    CarOperationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarOperationRequestDefaultTypeInternal _CarOperationRequest_default_instance_;
PROTOBUF_CONSTEXPR CarOperationResponse::CarOperationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CarOperationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarOperationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarOperationResponseDefaultTypeInternal() {}
  union {
    CarOperationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarOperationResponseDefaultTypeInternal _CarOperationResponse_default_instance_;
PROTOBUF_CONSTEXPR GetUserDataRequest::GetUserDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.u_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserDataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserDataRequestDefaultTypeInternal() {}
  union {
    GetUserDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserDataRequestDefaultTypeInternal _GetUserDataRequest_default_instance_;
PROTOBUF_CONSTEXPR GetUserDataResponse::GetUserDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.car_info_arr_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserDataResponseDefaultTypeInternal() {}
  union {
    GetUserDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserDataResponseDefaultTypeInternal _GetUserDataResponse_default_instance_;
PROTOBUF_CONSTEXPR AdminLoginRequest::AdminLoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.p_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AdminLoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdminLoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdminLoginRequestDefaultTypeInternal() {}
  union {
    AdminLoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdminLoginRequestDefaultTypeInternal _AdminLoginRequest_default_instance_;
PROTOBUF_CONSTEXPR AdminLoginResponse::AdminLoginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AdminLoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdminLoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdminLoginResponseDefaultTypeInternal() {}
  union {
    AdminLoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdminLoginResponseDefaultTypeInternal _AdminLoginResponse_default_instance_;
PROTOBUF_CONSTEXPR AdminGetDataRequest::AdminGetDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.p_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AdminGetDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdminGetDataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdminGetDataRequestDefaultTypeInternal() {}
  union {
    AdminGetDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdminGetDataRequestDefaultTypeInternal _AdminGetDataRequest_default_instance_;
PROTOBUF_CONSTEXPR AdminGetDataResponse::AdminGetDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.s_info_arr_)*/{}
  , /*decltype(_impl_.p_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AdminGetDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdminGetDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdminGetDataResponseDefaultTypeInternal() {}
  union {
    AdminGetDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdminGetDataResponseDefaultTypeInternal _AdminGetDataResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_service_2eproto[19];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_service_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_service_2eproto = nullptr;

const uint32_t TableStruct_service_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ParkingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ParkingInfo, _impl_.p_id_),
  PROTOBUF_FIELD_OFFSET(::ParkingInfo, _impl_.temperature_),
  PROTOBUF_FIELD_OFFSET(::ParkingInfo, _impl_.humidity_),
  PROTOBUF_FIELD_OFFSET(::ParkingInfo, _impl_.weather_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ParkingSpaceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ParkingSpaceInfo, _impl_.s_id_),
  PROTOBUF_FIELD_OFFSET(::ParkingSpaceInfo, _impl_.temperature_),
  PROTOBUF_FIELD_OFFSET(::ParkingSpaceInfo, _impl_.humidity_),
  PROTOBUF_FIELD_OFFSET(::ParkingSpaceInfo, _impl_.alarm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CarInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CarInfo, _impl_.p_temperature_),
  PROTOBUF_FIELD_OFFSET(::CarInfo, _impl_.p_humidity_),
  PROTOBUF_FIELD_OFFSET(::CarInfo, _impl_.p_weather_),
  PROTOBUF_FIELD_OFFSET(::CarInfo, _impl_.p_address_),
  PROTOBUF_FIELD_OFFSET(::CarInfo, _impl_.s_id_),
  PROTOBUF_FIELD_OFFSET(::CarInfo, _impl_.s_temperature_),
  PROTOBUF_FIELD_OFFSET(::CarInfo, _impl_.s_humidity_),
  PROTOBUF_FIELD_OFFSET(::CarInfo, _impl_.s_alarm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LPCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LPCheckRequest, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::LPCheckRequest, _impl_.parking_id_),
  PROTOBUF_FIELD_OFFSET(::LPCheckRequest, _impl_.parking_space_id_),
  PROTOBUF_FIELD_OFFSET(::LPCheckRequest, _impl_.license_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LPCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LPCheckResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::LPCheckResponse, _impl_.balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UploadInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UploadInfoRequest, _impl_.p_info_),
  PROTOBUF_FIELD_OFFSET(::UploadInfoRequest, _impl_.s_info_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UploadInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UploadInfoResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserLoginRequest, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::UserLoginRequest, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserLoginResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::UserLoginResponse, _impl_.u_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserRegistrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserRegistrationRequest, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::UserRegistrationRequest, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserRegistrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserRegistrationResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CarOperationRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CarOperationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CarOperationRequest, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::CarOperationRequest, _impl_.u_id_),
  PROTOBUF_FIELD_OFFSET(::CarOperationRequest, _impl_.license_),
  PROTOBUF_FIELD_OFFSET(::CarOperationRequest, _impl_.new_license_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CarOperationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CarOperationResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetUserDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetUserDataRequest, _impl_.u_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetUserDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetUserDataResponse, _impl_.car_info_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AdminLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AdminLoginRequest, _impl_.p_id_),
  PROTOBUF_FIELD_OFFSET(::AdminLoginRequest, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AdminLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AdminLoginResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AdminGetDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AdminGetDataRequest, _impl_.p_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AdminGetDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AdminGetDataResponse, _impl_.p_info_),
  PROTOBUF_FIELD_OFFSET(::AdminGetDataResponse, _impl_.s_info_arr_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ParkingInfo)},
  { 10, -1, -1, sizeof(::ParkingSpaceInfo)},
  { 20, -1, -1, sizeof(::CarInfo)},
  { 34, -1, -1, sizeof(::LPCheckRequest)},
  { 44, -1, -1, sizeof(::LPCheckResponse)},
  { 52, -1, -1, sizeof(::UploadInfoRequest)},
  { 60, -1, -1, sizeof(::UploadInfoResponse)},
  { 67, -1, -1, sizeof(::UserLoginRequest)},
  { 75, -1, -1, sizeof(::UserLoginResponse)},
  { 83, -1, -1, sizeof(::UserRegistrationRequest)},
  { 91, -1, -1, sizeof(::UserRegistrationResponse)},
  { 98, 108, -1, sizeof(::CarOperationRequest)},
  { 112, -1, -1, sizeof(::CarOperationResponse)},
  { 119, -1, -1, sizeof(::GetUserDataRequest)},
  { 126, -1, -1, sizeof(::GetUserDataResponse)},
  { 133, -1, -1, sizeof(::AdminLoginRequest)},
  { 141, -1, -1, sizeof(::AdminLoginResponse)},
  { 148, -1, -1, sizeof(::AdminGetDataRequest)},
  { 155, -1, -1, sizeof(::AdminGetDataResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ParkingInfo_default_instance_._instance,
  &::_ParkingSpaceInfo_default_instance_._instance,
  &::_CarInfo_default_instance_._instance,
  &::_LPCheckRequest_default_instance_._instance,
  &::_LPCheckResponse_default_instance_._instance,
  &::_UploadInfoRequest_default_instance_._instance,
  &::_UploadInfoResponse_default_instance_._instance,
  &::_UserLoginRequest_default_instance_._instance,
  &::_UserLoginResponse_default_instance_._instance,
  &::_UserRegistrationRequest_default_instance_._instance,
  &::_UserRegistrationResponse_default_instance_._instance,
  &::_CarOperationRequest_default_instance_._instance,
  &::_CarOperationResponse_default_instance_._instance,
  &::_GetUserDataRequest_default_instance_._instance,
  &::_GetUserDataResponse_default_instance_._instance,
  &::_AdminLoginRequest_default_instance_._instance,
  &::_AdminLoginResponse_default_instance_._instance,
  &::_AdminGetDataRequest_default_instance_._instance,
  &::_AdminGetDataResponse_default_instance_._instance,
};

const char descriptor_table_protodef_service_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rservice.proto\"S\n\013ParkingInfo\022\014\n\004p_id\030\001"
  " \001(\005\022\023\n\013temperature\030\002 \001(\005\022\020\n\010humidity\030\003 "
  "\001(\005\022\017\n\007weather\030\004 \001(\005\"^\n\020ParkingSpaceInfo"
  "\022\014\n\004s_id\030\001 \001(\005\022\023\n\013temperature\030\002 \001(\005\022\020\n\010h"
  "umidity\030\003 \001(\005\022\025\n\005alarm\030\004 \001(\0162\006.Alarm\"\254\001\n"
  "\007CarInfo\022\025\n\rp_temperature\030\001 \001(\005\022\022\n\np_hum"
  "idity\030\002 \001(\005\022\021\n\tp_weather\030\003 \001(\005\022\021\n\tp_addr"
  "ess\030\004 \001(\t\022\014\n\004s_id\030\005 \001(\005\022\025\n\rs_temperature"
  "\030\006 \001(\005\022\022\n\ns_humidity\030\007 \001(\005\022\027\n\007s_alarm\030\010 "
  "\001(\0162\006.Alarm\"^\n\016LPCheckRequest\022\r\n\005model\030\001"
  " \001(\005\022\022\n\nparking_id\030\002 \001(\005\022\030\n\020parking_spac"
  "e_id\030\003 \001(\005\022\017\n\007license\030\004 \001(\t\"2\n\017LPCheckRe"
  "sponse\022\016\n\006result\030\001 \001(\010\022\017\n\007balance\030\002 \001(\005\""
  "X\n\021UploadInfoRequest\022\034\n\006p_info\030\001 \001(\0132\014.P"
  "arkingInfo\022%\n\ns_info_arr\030\002 \003(\0132\021.Parking"
  "SpaceInfo\"$\n\022UploadInfoResponse\022\016\n\006resul"
  "t\030\001 \001(\005\"6\n\020UserLoginRequest\022\020\n\010username\030"
  "\001 \001(\t\022\020\n\010password\030\002 \001(\t\"\?\n\021UserLoginResp"
  "onse\022\034\n\006result\030\001 \001(\0162\014.LoginResult\022\014\n\004u_"
  "id\030\002 \001(\005\"=\n\027UserRegistrationRequest\022\020\n\010u"
  "sername\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"\?\n\030UserR"
  "egistrationResponse\022#\n\006result\030\001 \001(\0162\023.Re"
  "gistrationResult\"\200\001\n\023CarOperationRequest"
  "\022 \n\toperation\030\001 \001(\0162\r.CarOperation\022\014\n\004u_"
  "id\030\002 \001(\005\022\017\n\007license\030\003 \001(\t\022\030\n\013new_license"
  "\030\004 \001(\tH\000\210\001\001B\016\n\014_new_license\";\n\024CarOperat"
  "ionResponse\022#\n\006result\030\001 \001(\0162\023.CarOperati"
  "onResult\"\"\n\022GetUserDataRequest\022\014\n\004u_id\030\001"
  " \001(\005\"5\n\023GetUserDataResponse\022\036\n\014car_info_"
  "arr\030\001 \003(\0132\010.CarInfo\"3\n\021AdminLoginRequest"
  "\022\014\n\004p_id\030\001 \001(\005\022\020\n\010password\030\002 \001(\t\"2\n\022Admi"
  "nLoginResponse\022\034\n\006result\030\001 \001(\0162\014.LoginRe"
  "sult\"#\n\023AdminGetDataRequest\022\014\n\004p_id\030\001 \001("
  "\005\"[\n\024AdminGetDataResponse\022\034\n\006p_info\030\001 \001("
  "\0132\014.ParkingInfo\022%\n\ns_info_arr\030\002 \003(\0132\021.Pa"
  "rkingSpaceInfo*L\n\005Alarm\022\014\n\010ALARM_NO\020\000\022\016\n"
  "\nALARM_FIRE\020\001\022\r\n\tALARM_GAS\020\002\022\026\n\022ALARM_FI"
  "RE_AND_GAS\020\003*Y\n\013LoginResult\022\021\n\rLOGIN_SUC"
  "CESS\020\000\022\030\n\024LOGIN_FAIL_NOT_EXIST\020\001\022\035\n\031LOGI"
  "N_FAIL_WRONG_PASSWORD\020\002*S\n\022RegistrationR"
  "esult\022\030\n\024REGISTRATION_SUCCESS\020\000\022#\n\037REGIS"
  "TRATION_FAIL_ALREADY_EXIST\020\001*M\n\014CarOpera"
  "tion\022\021\n\rOPERATION_ADD\020\000\022\024\n\020OPERATION_DEL"
  "ETE\020\001\022\024\n\020OPERATION_CHANGE\020\002*\234\003\n\022CarOpera"
  "tionResult\022\031\n\025OPERATION_ADD_SUCCESS\020\000\022$\n"
  " OPERATION_ADD_FAIL_ALREADY_EXIST\020\001\022%\n!O"
  "PERATION_ADD_FAIL_USER_NOT_EXIST\020\002\022\034\n\030OP"
  "ERATION_DELETE_SUCCESS\020\003\022!\n\035OPERATION_DE"
  "LETE_FAIL_ENTERED\020\004\022#\n\037OPERATION_DELETE_"
  "FAIL_NOT_EXIST\020\005\022(\n$OPERATION_DELETE_FAI"
  "L_USER_NOT_EXIST\020\006\022\034\n\030OPERATION_CHANGE_S"
  "UCCESS\020\007\022!\n\035OPERATION_CHANGE_FAIL_ENTERE"
  "D\020\010\022#\n\037OPERATION_CHANGE_FAIL_NOT_EXIST\020\t"
  "\022(\n$OPERATION_CHANGE_FAIL_USER_NOT_EXIST"
  "\020\n2\356\003\n\016ProjectService\0226\n\021LicencePlateChe"
  "ck\022\017.LPCheckRequest\032\020.LPCheckResponse\022<\n"
  "\021UploadParkingInfo\022\022.UploadInfoRequest\032\023"
  ".UploadInfoResponse\0222\n\tUserLogin\022\021.UserL"
  "oginRequest\032\022.UserLoginResponse\022G\n\020UserR"
  "egistration\022\030.UserRegistrationRequest\032\031."
  "UserRegistrationResponse\022;\n\014CarOperation"
  "\022\024.CarOperationRequest\032\025.CarOperationRes"
  "ponse\0225\n\nAdminLogin\022\022.AdminLoginRequest\032"
  "\023.AdminLoginResponse\022;\n\014AdminGetData\022\024.A"
  "dminGetDataRequest\032\025.AdminGetDataRespons"
  "e\0228\n\013GetUserData\022\023.GetUserDataRequest\032\024."
  "GetUserDataResponseB\014Z\n../pkg/rpcb\006proto"
  "3"
  ;
static ::_pbi::once_flag descriptor_table_service_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_service_2eproto = {
    false, false, 2681, descriptor_table_protodef_service_2eproto,
    "service.proto",
    &descriptor_table_service_2eproto_once, nullptr, 0, 19,
    schemas, file_default_instances, TableStruct_service_2eproto::offsets,
    file_level_metadata_service_2eproto, file_level_enum_descriptors_service_2eproto,
    file_level_service_descriptors_service_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_service_2eproto_getter() {
  return &descriptor_table_service_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_service_2eproto(&descriptor_table_service_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Alarm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_enum_descriptors_service_2eproto[0];
}
bool Alarm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_enum_descriptors_service_2eproto[1];
}
bool LoginResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegistrationResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_enum_descriptors_service_2eproto[2];
}
bool RegistrationResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CarOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_enum_descriptors_service_2eproto[3];
}
bool CarOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CarOperationResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_enum_descriptors_service_2eproto[4];
}
bool CarOperationResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ParkingInfo::_Internal {
 public:
};

ParkingInfo::ParkingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ParkingInfo)
}
ParkingInfo::ParkingInfo(const ParkingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParkingInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.p_id_){}
    , decltype(_impl_.temperature_){}
    , decltype(_impl_.humidity_){}
    , decltype(_impl_.weather_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.p_id_, &from._impl_.p_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.weather_) -
    reinterpret_cast<char*>(&_impl_.p_id_)) + sizeof(_impl_.weather_));
  // @@protoc_insertion_point(copy_constructor:ParkingInfo)
}

inline void ParkingInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.p_id_){0}
    , decltype(_impl_.temperature_){0}
    , decltype(_impl_.humidity_){0}
    , decltype(_impl_.weather_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ParkingInfo::~ParkingInfo() {
  // @@protoc_insertion_point(destructor:ParkingInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParkingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParkingInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParkingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ParkingInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.p_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.weather_) -
      reinterpret_cast<char*>(&_impl_.p_id_)) + sizeof(_impl_.weather_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 p_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.p_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 humidity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.humidity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 weather = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.weather_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParkingInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParkingInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 p_id = 1;
  if (this->_internal_p_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_p_id(), target);
  }

  // int32 temperature = 2;
  if (this->_internal_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_temperature(), target);
  }

  // int32 humidity = 3;
  if (this->_internal_humidity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_humidity(), target);
  }

  // int32 weather = 4;
  if (this->_internal_weather() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_weather(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParkingInfo)
  return target;
}

size_t ParkingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParkingInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 p_id = 1;
  if (this->_internal_p_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p_id());
  }

  // int32 temperature = 2;
  if (this->_internal_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_temperature());
  }

  // int32 humidity = 3;
  if (this->_internal_humidity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_humidity());
  }

  // int32 weather = 4;
  if (this->_internal_weather() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_weather());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParkingInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParkingInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParkingInfo::GetClassData() const { return &_class_data_; }


void ParkingInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParkingInfo*>(&to_msg);
  auto& from = static_cast<const ParkingInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ParkingInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_p_id() != 0) {
    _this->_internal_set_p_id(from._internal_p_id());
  }
  if (from._internal_temperature() != 0) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  if (from._internal_humidity() != 0) {
    _this->_internal_set_humidity(from._internal_humidity());
  }
  if (from._internal_weather() != 0) {
    _this->_internal_set_weather(from._internal_weather());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParkingInfo::CopyFrom(const ParkingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParkingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingInfo::IsInitialized() const {
  return true;
}

void ParkingInfo::InternalSwap(ParkingInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParkingInfo, _impl_.weather_)
      + sizeof(ParkingInfo::_impl_.weather_)
      - PROTOBUF_FIELD_OFFSET(ParkingInfo, _impl_.p_id_)>(
          reinterpret_cast<char*>(&_impl_.p_id_),
          reinterpret_cast<char*>(&other->_impl_.p_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[0]);
}

// ===================================================================

class ParkingSpaceInfo::_Internal {
 public:
};

ParkingSpaceInfo::ParkingSpaceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ParkingSpaceInfo)
}
ParkingSpaceInfo::ParkingSpaceInfo(const ParkingSpaceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParkingSpaceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.s_id_){}
    , decltype(_impl_.temperature_){}
    , decltype(_impl_.humidity_){}
    , decltype(_impl_.alarm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.s_id_, &from._impl_.s_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.alarm_) -
    reinterpret_cast<char*>(&_impl_.s_id_)) + sizeof(_impl_.alarm_));
  // @@protoc_insertion_point(copy_constructor:ParkingSpaceInfo)
}

inline void ParkingSpaceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.s_id_){0}
    , decltype(_impl_.temperature_){0}
    , decltype(_impl_.humidity_){0}
    , decltype(_impl_.alarm_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ParkingSpaceInfo::~ParkingSpaceInfo() {
  // @@protoc_insertion_point(destructor:ParkingSpaceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParkingSpaceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParkingSpaceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParkingSpaceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ParkingSpaceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.s_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.alarm_) -
      reinterpret_cast<char*>(&_impl_.s_id_)) + sizeof(_impl_.alarm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingSpaceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 s_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.s_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 humidity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.humidity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Alarm alarm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_alarm(static_cast<::Alarm>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParkingSpaceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParkingSpaceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 s_id = 1;
  if (this->_internal_s_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_s_id(), target);
  }

  // int32 temperature = 2;
  if (this->_internal_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_temperature(), target);
  }

  // int32 humidity = 3;
  if (this->_internal_humidity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_humidity(), target);
  }

  // .Alarm alarm = 4;
  if (this->_internal_alarm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_alarm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParkingSpaceInfo)
  return target;
}

size_t ParkingSpaceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParkingSpaceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 s_id = 1;
  if (this->_internal_s_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_s_id());
  }

  // int32 temperature = 2;
  if (this->_internal_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_temperature());
  }

  // int32 humidity = 3;
  if (this->_internal_humidity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_humidity());
  }

  // .Alarm alarm = 4;
  if (this->_internal_alarm() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_alarm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParkingSpaceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParkingSpaceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParkingSpaceInfo::GetClassData() const { return &_class_data_; }


void ParkingSpaceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParkingSpaceInfo*>(&to_msg);
  auto& from = static_cast<const ParkingSpaceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ParkingSpaceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_s_id() != 0) {
    _this->_internal_set_s_id(from._internal_s_id());
  }
  if (from._internal_temperature() != 0) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  if (from._internal_humidity() != 0) {
    _this->_internal_set_humidity(from._internal_humidity());
  }
  if (from._internal_alarm() != 0) {
    _this->_internal_set_alarm(from._internal_alarm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParkingSpaceInfo::CopyFrom(const ParkingSpaceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParkingSpaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSpaceInfo::IsInitialized() const {
  return true;
}

void ParkingSpaceInfo::InternalSwap(ParkingSpaceInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParkingSpaceInfo, _impl_.alarm_)
      + sizeof(ParkingSpaceInfo::_impl_.alarm_)
      - PROTOBUF_FIELD_OFFSET(ParkingSpaceInfo, _impl_.s_id_)>(
          reinterpret_cast<char*>(&_impl_.s_id_),
          reinterpret_cast<char*>(&other->_impl_.s_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingSpaceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[1]);
}

// ===================================================================

class CarInfo::_Internal {
 public:
};

CarInfo::CarInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CarInfo)
}
CarInfo::CarInfo(const CarInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CarInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.p_address_){}
    , decltype(_impl_.p_temperature_){}
    , decltype(_impl_.p_humidity_){}
    , decltype(_impl_.p_weather_){}
    , decltype(_impl_.s_id_){}
    , decltype(_impl_.s_temperature_){}
    , decltype(_impl_.s_humidity_){}
    , decltype(_impl_.s_alarm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.p_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.p_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_p_address().empty()) {
    _this->_impl_.p_address_.Set(from._internal_p_address(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.p_temperature_, &from._impl_.p_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.s_alarm_) -
    reinterpret_cast<char*>(&_impl_.p_temperature_)) + sizeof(_impl_.s_alarm_));
  // @@protoc_insertion_point(copy_constructor:CarInfo)
}

inline void CarInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.p_address_){}
    , decltype(_impl_.p_temperature_){0}
    , decltype(_impl_.p_humidity_){0}
    , decltype(_impl_.p_weather_){0}
    , decltype(_impl_.s_id_){0}
    , decltype(_impl_.s_temperature_){0}
    , decltype(_impl_.s_humidity_){0}
    , decltype(_impl_.s_alarm_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.p_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.p_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CarInfo::~CarInfo() {
  // @@protoc_insertion_point(destructor:CarInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CarInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.p_address_.Destroy();
}

void CarInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CarInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.p_address_.ClearToEmpty();
  ::memset(&_impl_.p_temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.s_alarm_) -
      reinterpret_cast<char*>(&_impl_.p_temperature_)) + sizeof(_impl_.s_alarm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 p_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.p_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 p_humidity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.p_humidity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 p_weather = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.p_weather_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string p_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_p_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CarInfo.p_address"));
        } else
          goto handle_unusual;
        continue;
      // int32 s_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.s_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 s_temperature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.s_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 s_humidity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.s_humidity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Alarm s_alarm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_s_alarm(static_cast<::Alarm>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CarInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 p_temperature = 1;
  if (this->_internal_p_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_p_temperature(), target);
  }

  // int32 p_humidity = 2;
  if (this->_internal_p_humidity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_p_humidity(), target);
  }

  // int32 p_weather = 3;
  if (this->_internal_p_weather() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_p_weather(), target);
  }

  // string p_address = 4;
  if (!this->_internal_p_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_p_address().data(), static_cast<int>(this->_internal_p_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CarInfo.p_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_p_address(), target);
  }

  // int32 s_id = 5;
  if (this->_internal_s_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_s_id(), target);
  }

  // int32 s_temperature = 6;
  if (this->_internal_s_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_s_temperature(), target);
  }

  // int32 s_humidity = 7;
  if (this->_internal_s_humidity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_s_humidity(), target);
  }

  // .Alarm s_alarm = 8;
  if (this->_internal_s_alarm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_s_alarm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CarInfo)
  return target;
}

size_t CarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CarInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string p_address = 4;
  if (!this->_internal_p_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_p_address());
  }

  // int32 p_temperature = 1;
  if (this->_internal_p_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p_temperature());
  }

  // int32 p_humidity = 2;
  if (this->_internal_p_humidity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p_humidity());
  }

  // int32 p_weather = 3;
  if (this->_internal_p_weather() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p_weather());
  }

  // int32 s_id = 5;
  if (this->_internal_s_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_s_id());
  }

  // int32 s_temperature = 6;
  if (this->_internal_s_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_s_temperature());
  }

  // int32 s_humidity = 7;
  if (this->_internal_s_humidity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_s_humidity());
  }

  // .Alarm s_alarm = 8;
  if (this->_internal_s_alarm() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_s_alarm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CarInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarInfo::GetClassData() const { return &_class_data_; }


void CarInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CarInfo*>(&to_msg);
  auto& from = static_cast<const CarInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CarInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_p_address().empty()) {
    _this->_internal_set_p_address(from._internal_p_address());
  }
  if (from._internal_p_temperature() != 0) {
    _this->_internal_set_p_temperature(from._internal_p_temperature());
  }
  if (from._internal_p_humidity() != 0) {
    _this->_internal_set_p_humidity(from._internal_p_humidity());
  }
  if (from._internal_p_weather() != 0) {
    _this->_internal_set_p_weather(from._internal_p_weather());
  }
  if (from._internal_s_id() != 0) {
    _this->_internal_set_s_id(from._internal_s_id());
  }
  if (from._internal_s_temperature() != 0) {
    _this->_internal_set_s_temperature(from._internal_s_temperature());
  }
  if (from._internal_s_humidity() != 0) {
    _this->_internal_set_s_humidity(from._internal_s_humidity());
  }
  if (from._internal_s_alarm() != 0) {
    _this->_internal_set_s_alarm(from._internal_s_alarm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarInfo::CopyFrom(const CarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarInfo::IsInitialized() const {
  return true;
}

void CarInfo::InternalSwap(CarInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.p_address_, lhs_arena,
      &other->_impl_.p_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CarInfo, _impl_.s_alarm_)
      + sizeof(CarInfo::_impl_.s_alarm_)
      - PROTOBUF_FIELD_OFFSET(CarInfo, _impl_.p_temperature_)>(
          reinterpret_cast<char*>(&_impl_.p_temperature_),
          reinterpret_cast<char*>(&other->_impl_.p_temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CarInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[2]);
}

// ===================================================================

class LPCheckRequest::_Internal {
 public:
};

LPCheckRequest::LPCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LPCheckRequest)
}
LPCheckRequest::LPCheckRequest(const LPCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LPCheckRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.license_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.parking_id_){}
    , decltype(_impl_.parking_space_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_license().empty()) {
    _this->_impl_.license_.Set(from._internal_license(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.model_, &from._impl_.model_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.parking_space_id_) -
    reinterpret_cast<char*>(&_impl_.model_)) + sizeof(_impl_.parking_space_id_));
  // @@protoc_insertion_point(copy_constructor:LPCheckRequest)
}

inline void LPCheckRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.license_){}
    , decltype(_impl_.model_){0}
    , decltype(_impl_.parking_id_){0}
    , decltype(_impl_.parking_space_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LPCheckRequest::~LPCheckRequest() {
  // @@protoc_insertion_point(destructor:LPCheckRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LPCheckRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.license_.Destroy();
}

void LPCheckRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LPCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LPCheckRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.license_.ClearToEmpty();
  ::memset(&_impl_.model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.parking_space_id_) -
      reinterpret_cast<char*>(&_impl_.model_)) + sizeof(_impl_.parking_space_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LPCheckRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 parking_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.parking_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 parking_space_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.parking_space_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string license = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_license();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "LPCheckRequest.license"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LPCheckRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LPCheckRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model = 1;
  if (this->_internal_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_model(), target);
  }

  // int32 parking_id = 2;
  if (this->_internal_parking_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_parking_id(), target);
  }

  // int32 parking_space_id = 3;
  if (this->_internal_parking_space_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_parking_space_id(), target);
  }

  // string license = 4;
  if (!this->_internal_license().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LPCheckRequest.license");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_license(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LPCheckRequest)
  return target;
}

size_t LPCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LPCheckRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string license = 4;
  if (!this->_internal_license().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());
  }

  // int32 model = 1;
  if (this->_internal_model() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_model());
  }

  // int32 parking_id = 2;
  if (this->_internal_parking_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parking_id());
  }

  // int32 parking_space_id = 3;
  if (this->_internal_parking_space_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parking_space_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LPCheckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LPCheckRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LPCheckRequest::GetClassData() const { return &_class_data_; }


void LPCheckRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LPCheckRequest*>(&to_msg);
  auto& from = static_cast<const LPCheckRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LPCheckRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_license().empty()) {
    _this->_internal_set_license(from._internal_license());
  }
  if (from._internal_model() != 0) {
    _this->_internal_set_model(from._internal_model());
  }
  if (from._internal_parking_id() != 0) {
    _this->_internal_set_parking_id(from._internal_parking_id());
  }
  if (from._internal_parking_space_id() != 0) {
    _this->_internal_set_parking_space_id(from._internal_parking_space_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LPCheckRequest::CopyFrom(const LPCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LPCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LPCheckRequest::IsInitialized() const {
  return true;
}

void LPCheckRequest::InternalSwap(LPCheckRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.license_, lhs_arena,
      &other->_impl_.license_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LPCheckRequest, _impl_.parking_space_id_)
      + sizeof(LPCheckRequest::_impl_.parking_space_id_)
      - PROTOBUF_FIELD_OFFSET(LPCheckRequest, _impl_.model_)>(
          reinterpret_cast<char*>(&_impl_.model_),
          reinterpret_cast<char*>(&other->_impl_.model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LPCheckRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[3]);
}

// ===================================================================

class LPCheckResponse::_Internal {
 public:
};

LPCheckResponse::LPCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LPCheckResponse)
}
LPCheckResponse::LPCheckResponse(const LPCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LPCheckResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.balance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.balance_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.balance_));
  // @@protoc_insertion_point(copy_constructor:LPCheckResponse)
}

inline void LPCheckResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){false}
    , decltype(_impl_.balance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LPCheckResponse::~LPCheckResponse() {
  // @@protoc_insertion_point(destructor:LPCheckResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LPCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LPCheckResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LPCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LPCheckResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.balance_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LPCheckResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LPCheckResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LPCheckResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // int32 balance = 2;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LPCheckResponse)
  return target;
}

size_t LPCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LPCheckResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  // int32 balance = 2;
  if (this->_internal_balance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LPCheckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LPCheckResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LPCheckResponse::GetClassData() const { return &_class_data_; }


void LPCheckResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LPCheckResponse*>(&to_msg);
  auto& from = static_cast<const LPCheckResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LPCheckResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_balance() != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LPCheckResponse::CopyFrom(const LPCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LPCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LPCheckResponse::IsInitialized() const {
  return true;
}

void LPCheckResponse::InternalSwap(LPCheckResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LPCheckResponse, _impl_.balance_)
      + sizeof(LPCheckResponse::_impl_.balance_)
      - PROTOBUF_FIELD_OFFSET(LPCheckResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LPCheckResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[4]);
}

// ===================================================================

class UploadInfoRequest::_Internal {
 public:
  static const ::ParkingInfo& p_info(const UploadInfoRequest* msg);
};

const ::ParkingInfo&
UploadInfoRequest::_Internal::p_info(const UploadInfoRequest* msg) {
  return *msg->_impl_.p_info_;
}
UploadInfoRequest::UploadInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UploadInfoRequest)
}
UploadInfoRequest::UploadInfoRequest(const UploadInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.s_info_arr_){from._impl_.s_info_arr_}
    , decltype(_impl_.p_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_p_info()) {
    _this->_impl_.p_info_ = new ::ParkingInfo(*from._impl_.p_info_);
  }
  // @@protoc_insertion_point(copy_constructor:UploadInfoRequest)
}

inline void UploadInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.s_info_arr_){arena}
    , decltype(_impl_.p_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UploadInfoRequest::~UploadInfoRequest() {
  // @@protoc_insertion_point(destructor:UploadInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s_info_arr_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.p_info_;
}

void UploadInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UploadInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.s_info_arr_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.p_info_ != nullptr) {
    delete _impl_.p_info_;
  }
  _impl_.p_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ParkingInfo p_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ParkingSpaceInfo s_info_arr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_s_info_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UploadInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ParkingInfo p_info = 1;
  if (this->_internal_has_p_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::p_info(this),
        _Internal::p_info(this).GetCachedSize(), target, stream);
  }

  // repeated .ParkingSpaceInfo s_info_arr = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_s_info_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_s_info_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UploadInfoRequest)
  return target;
}

size_t UploadInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UploadInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ParkingSpaceInfo s_info_arr = 2;
  total_size += 1UL * this->_internal_s_info_arr_size();
  for (const auto& msg : this->_impl_.s_info_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ParkingInfo p_info = 1;
  if (this->_internal_has_p_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadInfoRequest::GetClassData() const { return &_class_data_; }


void UploadInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadInfoRequest*>(&to_msg);
  auto& from = static_cast<const UploadInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UploadInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.s_info_arr_.MergeFrom(from._impl_.s_info_arr_);
  if (from._internal_has_p_info()) {
    _this->_internal_mutable_p_info()->::ParkingInfo::MergeFrom(
        from._internal_p_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadInfoRequest::CopyFrom(const UploadInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UploadInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadInfoRequest::IsInitialized() const {
  return true;
}

void UploadInfoRequest::InternalSwap(UploadInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.s_info_arr_.InternalSwap(&other->_impl_.s_info_arr_);
  swap(_impl_.p_info_, other->_impl_.p_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[5]);
}

// ===================================================================

class UploadInfoResponse::_Internal {
 public:
};

UploadInfoResponse::UploadInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UploadInfoResponse)
}
UploadInfoResponse::UploadInfoResponse(const UploadInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:UploadInfoResponse)
}

inline void UploadInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UploadInfoResponse::~UploadInfoResponse() {
  // @@protoc_insertion_point(destructor:UploadInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UploadInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UploadInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UploadInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UploadInfoResponse)
  return target;
}

size_t UploadInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UploadInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadInfoResponse::GetClassData() const { return &_class_data_; }


void UploadInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadInfoResponse*>(&to_msg);
  auto& from = static_cast<const UploadInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UploadInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadInfoResponse::CopyFrom(const UploadInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UploadInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadInfoResponse::IsInitialized() const {
  return true;
}

void UploadInfoResponse::InternalSwap(UploadInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[6]);
}

// ===================================================================

class UserLoginRequest::_Internal {
 public:
};

UserLoginRequest::UserLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UserLoginRequest)
}
UserLoginRequest::UserLoginRequest(const UserLoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:UserLoginRequest)
}

inline void UserLoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserLoginRequest::~UserLoginRequest() {
  // @@protoc_insertion_point(destructor:UserLoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
}

void UserLoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UserLoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UserLoginRequest.username"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UserLoginRequest.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserLoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserLoginRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserLoginRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserLoginRequest)
  return target;
}

size_t UserLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserLoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLoginRequest::GetClassData() const { return &_class_data_; }


void UserLoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLoginRequest*>(&to_msg);
  auto& from = static_cast<const UserLoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UserLoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLoginRequest::CopyFrom(const UserLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginRequest::IsInitialized() const {
  return true;
}

void UserLoginRequest::InternalSwap(UserLoginRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[7]);
}

// ===================================================================

class UserLoginResponse::_Internal {
 public:
};

UserLoginResponse::UserLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UserLoginResponse)
}
UserLoginResponse::UserLoginResponse(const UserLoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLoginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.u_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.u_id_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.u_id_));
  // @@protoc_insertion_point(copy_constructor:UserLoginResponse)
}

inline void UserLoginResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , decltype(_impl_.u_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserLoginResponse::~UserLoginResponse() {
  // @@protoc_insertion_point(destructor:UserLoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserLoginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UserLoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.u_id_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.u_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LoginResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::LoginResult>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 u_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.u_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserLoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LoginResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // int32 u_id = 2;
  if (this->_internal_u_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_u_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserLoginResponse)
  return target;
}

size_t UserLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserLoginResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LoginResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  // int32 u_id = 2;
  if (this->_internal_u_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_u_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLoginResponse::GetClassData() const { return &_class_data_; }


void UserLoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLoginResponse*>(&to_msg);
  auto& from = static_cast<const UserLoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UserLoginResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_u_id() != 0) {
    _this->_internal_set_u_id(from._internal_u_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLoginResponse::CopyFrom(const UserLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginResponse::IsInitialized() const {
  return true;
}

void UserLoginResponse::InternalSwap(UserLoginResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserLoginResponse, _impl_.u_id_)
      + sizeof(UserLoginResponse::_impl_.u_id_)
      - PROTOBUF_FIELD_OFFSET(UserLoginResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[8]);
}

// ===================================================================

class UserRegistrationRequest::_Internal {
 public:
};

UserRegistrationRequest::UserRegistrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UserRegistrationRequest)
}
UserRegistrationRequest::UserRegistrationRequest(const UserRegistrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserRegistrationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:UserRegistrationRequest)
}

inline void UserRegistrationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserRegistrationRequest::~UserRegistrationRequest() {
  // @@protoc_insertion_point(destructor:UserRegistrationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserRegistrationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
}

void UserRegistrationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserRegistrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UserRegistrationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRegistrationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UserRegistrationRequest.username"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UserRegistrationRequest.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserRegistrationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserRegistrationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserRegistrationRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserRegistrationRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserRegistrationRequest)
  return target;
}

size_t UserRegistrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserRegistrationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserRegistrationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserRegistrationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserRegistrationRequest::GetClassData() const { return &_class_data_; }


void UserRegistrationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserRegistrationRequest*>(&to_msg);
  auto& from = static_cast<const UserRegistrationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UserRegistrationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserRegistrationRequest::CopyFrom(const UserRegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserRegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRegistrationRequest::IsInitialized() const {
  return true;
}

void UserRegistrationRequest::InternalSwap(UserRegistrationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRegistrationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[9]);
}

// ===================================================================

class UserRegistrationResponse::_Internal {
 public:
};

UserRegistrationResponse::UserRegistrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UserRegistrationResponse)
}
UserRegistrationResponse::UserRegistrationResponse(const UserRegistrationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserRegistrationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:UserRegistrationResponse)
}

inline void UserRegistrationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserRegistrationResponse::~UserRegistrationResponse() {
  // @@protoc_insertion_point(destructor:UserRegistrationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserRegistrationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserRegistrationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserRegistrationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UserRegistrationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRegistrationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .RegistrationResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::RegistrationResult>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserRegistrationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserRegistrationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .RegistrationResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserRegistrationResponse)
  return target;
}

size_t UserRegistrationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserRegistrationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RegistrationResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserRegistrationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserRegistrationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserRegistrationResponse::GetClassData() const { return &_class_data_; }


void UserRegistrationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserRegistrationResponse*>(&to_msg);
  auto& from = static_cast<const UserRegistrationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UserRegistrationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserRegistrationResponse::CopyFrom(const UserRegistrationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserRegistrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRegistrationResponse::IsInitialized() const {
  return true;
}

void UserRegistrationResponse::InternalSwap(UserRegistrationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRegistrationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[10]);
}

// ===================================================================

class CarOperationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CarOperationRequest>()._impl_._has_bits_);
  static void set_has_new_license(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CarOperationRequest::CarOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CarOperationRequest)
}
CarOperationRequest::CarOperationRequest(const CarOperationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CarOperationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.license_){}
    , decltype(_impl_.new_license_){}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.u_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_license().empty()) {
    _this->_impl_.license_.Set(from._internal_license(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_new_license()) {
    _this->_impl_.new_license_.Set(from._internal_new_license(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.operation_, &from._impl_.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.u_id_) -
    reinterpret_cast<char*>(&_impl_.operation_)) + sizeof(_impl_.u_id_));
  // @@protoc_insertion_point(copy_constructor:CarOperationRequest)
}

inline void CarOperationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.license_){}
    , decltype(_impl_.new_license_){}
    , decltype(_impl_.operation_){0}
    , decltype(_impl_.u_id_){0}
  };
  _impl_.license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CarOperationRequest::~CarOperationRequest() {
  // @@protoc_insertion_point(destructor:CarOperationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CarOperationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.license_.Destroy();
  _impl_.new_license_.Destroy();
}

void CarOperationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CarOperationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CarOperationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.license_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.new_license_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.u_id_) -
      reinterpret_cast<char*>(&_impl_.operation_)) + sizeof(_impl_.u_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarOperationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CarOperation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::CarOperation>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 u_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.u_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string license = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_license();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CarOperationRequest.license"));
        } else
          goto handle_unusual;
        continue;
      // optional string new_license = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_new_license();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CarOperationRequest.new_license"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarOperationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CarOperationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .CarOperation operation = 1;
  if (this->_internal_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // int32 u_id = 2;
  if (this->_internal_u_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_u_id(), target);
  }

  // string license = 3;
  if (!this->_internal_license().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CarOperationRequest.license");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_license(), target);
  }

  // optional string new_license = 4;
  if (_internal_has_new_license()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_license().data(), static_cast<int>(this->_internal_new_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CarOperationRequest.new_license");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_license(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CarOperationRequest)
  return target;
}

size_t CarOperationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CarOperationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string license = 3;
  if (!this->_internal_license().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());
  }

  // optional string new_license = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_license());
  }

  // .CarOperation operation = 1;
  if (this->_internal_operation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
  }

  // int32 u_id = 2;
  if (this->_internal_u_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_u_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarOperationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CarOperationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarOperationRequest::GetClassData() const { return &_class_data_; }


void CarOperationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CarOperationRequest*>(&to_msg);
  auto& from = static_cast<const CarOperationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CarOperationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_license().empty()) {
    _this->_internal_set_license(from._internal_license());
  }
  if (from._internal_has_new_license()) {
    _this->_internal_set_new_license(from._internal_new_license());
  }
  if (from._internal_operation() != 0) {
    _this->_internal_set_operation(from._internal_operation());
  }
  if (from._internal_u_id() != 0) {
    _this->_internal_set_u_id(from._internal_u_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarOperationRequest::CopyFrom(const CarOperationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CarOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarOperationRequest::IsInitialized() const {
  return true;
}

void CarOperationRequest::InternalSwap(CarOperationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.license_, lhs_arena,
      &other->_impl_.license_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_license_, lhs_arena,
      &other->_impl_.new_license_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CarOperationRequest, _impl_.u_id_)
      + sizeof(CarOperationRequest::_impl_.u_id_)
      - PROTOBUF_FIELD_OFFSET(CarOperationRequest, _impl_.operation_)>(
          reinterpret_cast<char*>(&_impl_.operation_),
          reinterpret_cast<char*>(&other->_impl_.operation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CarOperationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[11]);
}

// ===================================================================

class CarOperationResponse::_Internal {
 public:
};

CarOperationResponse::CarOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CarOperationResponse)
}
CarOperationResponse::CarOperationResponse(const CarOperationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CarOperationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CarOperationResponse)
}

inline void CarOperationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CarOperationResponse::~CarOperationResponse() {
  // @@protoc_insertion_point(destructor:CarOperationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CarOperationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CarOperationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CarOperationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CarOperationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarOperationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CarOperationResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::CarOperationResult>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarOperationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CarOperationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .CarOperationResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CarOperationResponse)
  return target;
}

size_t CarOperationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CarOperationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CarOperationResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarOperationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CarOperationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarOperationResponse::GetClassData() const { return &_class_data_; }


void CarOperationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CarOperationResponse*>(&to_msg);
  auto& from = static_cast<const CarOperationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CarOperationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarOperationResponse::CopyFrom(const CarOperationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CarOperationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarOperationResponse::IsInitialized() const {
  return true;
}

void CarOperationResponse::InternalSwap(CarOperationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CarOperationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[12]);
}

// ===================================================================

class GetUserDataRequest::_Internal {
 public:
};

GetUserDataRequest::GetUserDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetUserDataRequest)
}
GetUserDataRequest::GetUserDataRequest(const GetUserDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserDataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.u_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.u_id_ = from._impl_.u_id_;
  // @@protoc_insertion_point(copy_constructor:GetUserDataRequest)
}

inline void GetUserDataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.u_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetUserDataRequest::~GetUserDataRequest() {
  // @@protoc_insertion_point(destructor:GetUserDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetUserDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetUserDataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.u_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 u_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.u_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserDataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetUserDataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 u_id = 1;
  if (this->_internal_u_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_u_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetUserDataRequest)
  return target;
}

size_t GetUserDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetUserDataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 u_id = 1;
  if (this->_internal_u_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_u_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserDataRequest::GetClassData() const { return &_class_data_; }


void GetUserDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserDataRequest*>(&to_msg);
  auto& from = static_cast<const GetUserDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetUserDataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_u_id() != 0) {
    _this->_internal_set_u_id(from._internal_u_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserDataRequest::CopyFrom(const GetUserDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetUserDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserDataRequest::IsInitialized() const {
  return true;
}

void GetUserDataRequest::InternalSwap(GetUserDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.u_id_, other->_impl_.u_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[13]);
}

// ===================================================================

class GetUserDataResponse::_Internal {
 public:
};

GetUserDataResponse::GetUserDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetUserDataResponse)
}
GetUserDataResponse::GetUserDataResponse(const GetUserDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.car_info_arr_){from._impl_.car_info_arr_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GetUserDataResponse)
}

inline void GetUserDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.car_info_arr_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetUserDataResponse::~GetUserDataResponse() {
  // @@protoc_insertion_point(destructor:GetUserDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.car_info_arr_.~RepeatedPtrField();
}

void GetUserDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetUserDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.car_info_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CarInfo car_info_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_car_info_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetUserDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CarInfo car_info_arr = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_car_info_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_car_info_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetUserDataResponse)
  return target;
}

size_t GetUserDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetUserDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CarInfo car_info_arr = 1;
  total_size += 1UL * this->_internal_car_info_arr_size();
  for (const auto& msg : this->_impl_.car_info_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserDataResponse::GetClassData() const { return &_class_data_; }


void GetUserDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserDataResponse*>(&to_msg);
  auto& from = static_cast<const GetUserDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetUserDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.car_info_arr_.MergeFrom(from._impl_.car_info_arr_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserDataResponse::CopyFrom(const GetUserDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetUserDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserDataResponse::IsInitialized() const {
  return true;
}

void GetUserDataResponse::InternalSwap(GetUserDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.car_info_arr_.InternalSwap(&other->_impl_.car_info_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[14]);
}

// ===================================================================

class AdminLoginRequest::_Internal {
 public:
};

AdminLoginRequest::AdminLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AdminLoginRequest)
}
AdminLoginRequest::AdminLoginRequest(const AdminLoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdminLoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.p_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.p_id_ = from._impl_.p_id_;
  // @@protoc_insertion_point(copy_constructor:AdminLoginRequest)
}

inline void AdminLoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.p_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdminLoginRequest::~AdminLoginRequest() {
  // @@protoc_insertion_point(destructor:AdminLoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdminLoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.password_.Destroy();
}

void AdminLoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdminLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminLoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.password_.ClearToEmpty();
  _impl_.p_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminLoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 p_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.p_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AdminLoginRequest.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdminLoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdminLoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 p_id = 1;
  if (this->_internal_p_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_p_id(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AdminLoginRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdminLoginRequest)
  return target;
}

size_t AdminLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminLoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int32 p_id = 1;
  if (this->_internal_p_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdminLoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdminLoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdminLoginRequest::GetClassData() const { return &_class_data_; }


void AdminLoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdminLoginRequest*>(&to_msg);
  auto& from = static_cast<const AdminLoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AdminLoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_p_id() != 0) {
    _this->_internal_set_p_id(from._internal_p_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdminLoginRequest::CopyFrom(const AdminLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminLoginRequest::IsInitialized() const {
  return true;
}

void AdminLoginRequest::InternalSwap(AdminLoginRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  swap(_impl_.p_id_, other->_impl_.p_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminLoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[15]);
}

// ===================================================================

class AdminLoginResponse::_Internal {
 public:
};

AdminLoginResponse::AdminLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AdminLoginResponse)
}
AdminLoginResponse::AdminLoginResponse(const AdminLoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdminLoginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:AdminLoginResponse)
}

inline void AdminLoginResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AdminLoginResponse::~AdminLoginResponse() {
  // @@protoc_insertion_point(destructor:AdminLoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdminLoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AdminLoginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdminLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminLoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminLoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LoginResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::LoginResult>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdminLoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdminLoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LoginResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdminLoginResponse)
  return target;
}

size_t AdminLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminLoginResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LoginResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdminLoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdminLoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdminLoginResponse::GetClassData() const { return &_class_data_; }


void AdminLoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdminLoginResponse*>(&to_msg);
  auto& from = static_cast<const AdminLoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AdminLoginResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdminLoginResponse::CopyFrom(const AdminLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminLoginResponse::IsInitialized() const {
  return true;
}

void AdminLoginResponse::InternalSwap(AdminLoginResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminLoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[16]);
}

// ===================================================================

class AdminGetDataRequest::_Internal {
 public:
};

AdminGetDataRequest::AdminGetDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AdminGetDataRequest)
}
AdminGetDataRequest::AdminGetDataRequest(const AdminGetDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdminGetDataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.p_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.p_id_ = from._impl_.p_id_;
  // @@protoc_insertion_point(copy_constructor:AdminGetDataRequest)
}

inline void AdminGetDataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.p_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AdminGetDataRequest::~AdminGetDataRequest() {
  // @@protoc_insertion_point(destructor:AdminGetDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdminGetDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AdminGetDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdminGetDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminGetDataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.p_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminGetDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 p_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.p_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdminGetDataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdminGetDataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 p_id = 1;
  if (this->_internal_p_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_p_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdminGetDataRequest)
  return target;
}

size_t AdminGetDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminGetDataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 p_id = 1;
  if (this->_internal_p_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdminGetDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdminGetDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdminGetDataRequest::GetClassData() const { return &_class_data_; }


void AdminGetDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdminGetDataRequest*>(&to_msg);
  auto& from = static_cast<const AdminGetDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AdminGetDataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_p_id() != 0) {
    _this->_internal_set_p_id(from._internal_p_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdminGetDataRequest::CopyFrom(const AdminGetDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminGetDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminGetDataRequest::IsInitialized() const {
  return true;
}

void AdminGetDataRequest::InternalSwap(AdminGetDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.p_id_, other->_impl_.p_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminGetDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[17]);
}

// ===================================================================

class AdminGetDataResponse::_Internal {
 public:
  static const ::ParkingInfo& p_info(const AdminGetDataResponse* msg);
};

const ::ParkingInfo&
AdminGetDataResponse::_Internal::p_info(const AdminGetDataResponse* msg) {
  return *msg->_impl_.p_info_;
}
AdminGetDataResponse::AdminGetDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AdminGetDataResponse)
}
AdminGetDataResponse::AdminGetDataResponse(const AdminGetDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdminGetDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.s_info_arr_){from._impl_.s_info_arr_}
    , decltype(_impl_.p_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_p_info()) {
    _this->_impl_.p_info_ = new ::ParkingInfo(*from._impl_.p_info_);
  }
  // @@protoc_insertion_point(copy_constructor:AdminGetDataResponse)
}

inline void AdminGetDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.s_info_arr_){arena}
    , decltype(_impl_.p_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AdminGetDataResponse::~AdminGetDataResponse() {
  // @@protoc_insertion_point(destructor:AdminGetDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdminGetDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s_info_arr_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.p_info_;
}

void AdminGetDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdminGetDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminGetDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.s_info_arr_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.p_info_ != nullptr) {
    delete _impl_.p_info_;
  }
  _impl_.p_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminGetDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ParkingInfo p_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ParkingSpaceInfo s_info_arr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_s_info_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdminGetDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdminGetDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ParkingInfo p_info = 1;
  if (this->_internal_has_p_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::p_info(this),
        _Internal::p_info(this).GetCachedSize(), target, stream);
  }

  // repeated .ParkingSpaceInfo s_info_arr = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_s_info_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_s_info_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdminGetDataResponse)
  return target;
}

size_t AdminGetDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminGetDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ParkingSpaceInfo s_info_arr = 2;
  total_size += 1UL * this->_internal_s_info_arr_size();
  for (const auto& msg : this->_impl_.s_info_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ParkingInfo p_info = 1;
  if (this->_internal_has_p_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdminGetDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdminGetDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdminGetDataResponse::GetClassData() const { return &_class_data_; }


void AdminGetDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdminGetDataResponse*>(&to_msg);
  auto& from = static_cast<const AdminGetDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AdminGetDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.s_info_arr_.MergeFrom(from._impl_.s_info_arr_);
  if (from._internal_has_p_info()) {
    _this->_internal_mutable_p_info()->::ParkingInfo::MergeFrom(
        from._internal_p_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdminGetDataResponse::CopyFrom(const AdminGetDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminGetDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminGetDataResponse::IsInitialized() const {
  return true;
}

void AdminGetDataResponse::InternalSwap(AdminGetDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.s_info_arr_.InternalSwap(&other->_impl_.s_info_arr_);
  swap(_impl_.p_info_, other->_impl_.p_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminGetDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[18]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ParkingInfo*
Arena::CreateMaybeMessage< ::ParkingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParkingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ParkingSpaceInfo*
Arena::CreateMaybeMessage< ::ParkingSpaceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParkingSpaceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CarInfo*
Arena::CreateMaybeMessage< ::CarInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CarInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::LPCheckRequest*
Arena::CreateMaybeMessage< ::LPCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LPCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LPCheckResponse*
Arena::CreateMaybeMessage< ::LPCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LPCheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::UploadInfoRequest*
Arena::CreateMaybeMessage< ::UploadInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UploadInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UploadInfoResponse*
Arena::CreateMaybeMessage< ::UploadInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UploadInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::UserLoginRequest*
Arena::CreateMaybeMessage< ::UserLoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UserLoginResponse*
Arena::CreateMaybeMessage< ::UserLoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserLoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::UserRegistrationRequest*
Arena::CreateMaybeMessage< ::UserRegistrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserRegistrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UserRegistrationResponse*
Arena::CreateMaybeMessage< ::UserRegistrationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserRegistrationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CarOperationRequest*
Arena::CreateMaybeMessage< ::CarOperationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CarOperationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CarOperationResponse*
Arena::CreateMaybeMessage< ::CarOperationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CarOperationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GetUserDataRequest*
Arena::CreateMaybeMessage< ::GetUserDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetUserDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetUserDataResponse*
Arena::CreateMaybeMessage< ::GetUserDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetUserDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminLoginRequest*
Arena::CreateMaybeMessage< ::AdminLoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdminLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminLoginResponse*
Arena::CreateMaybeMessage< ::AdminLoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdminLoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminGetDataRequest*
Arena::CreateMaybeMessage< ::AdminGetDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdminGetDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminGetDataResponse*
Arena::CreateMaybeMessage< ::AdminGetDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdminGetDataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
